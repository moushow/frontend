{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      currentTime: '',\n      // 添加currentTime数据属性\n      currentDate: new Date().toISOString().slice(0, 10),\n      dailySchedule: [] // 存储今日日程\n    };\n  },\n  mounted() {\n    this.initChart();\n    this.updateTime();\n    setInterval(this.updateTime, 1000);\n    this.loadTodaySchedules();\n  },\n  methods: {\n    initChart() {\n      var option = {\n        title: {\n          text: '日程信息统计'\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: [],\n          type: 'line'\n        }, {\n          data: [],\n          type: 'bar'\n        }]\n      };\n      var chartDom = document.getElementById('main');\n      var myChart = echarts.init(chartDom);\n      const username = this.user.username;\n      this.request.get(\"/echarts/example/\" + username).then(res => {\n        console.log(res);\n        option.xAxis.data = res.data.x;\n        option.series[0].data = res.data.y;\n        option.series[1].data = res.data.y;\n        myChart.setOption(option);\n      });\n    },\n    updateTime() {\n      const currentDate = new Date();\n      this.currentTime = currentDate.toLocaleString(); // 更新currentTime\n    },\n    loadTodaySchedules() {\n      const today = new Date().toISOString().slice(0, 10);\n      const username = this.user.username;\n      console.log(`Loading schedule for: ${username} on ${today}`); // 调试信息\n      this.request.get(`/schedule/page`, {\n        params: {\n          date: today,\n          username: username,\n          pageSize: 100,\n          // 假设今天的日程不会超过100条\n          pageNum: 1\n        }\n      }).then(res => {\n        console.log('Schedule response:', res); // 调试信息\n        if (res.data && Array.isArray(res.data)) {\n          this.dailySchedule = res.data.map(item => {\n            let date = new Date(item.date);\n            date.setDate(date.getDate() + 1);\n            item.date = date.toISOString().split('T')[0];\n            return item;\n          });\n        } else {\n          console.error('Unexpected response format:', res.data); // 调试信息\n        }\n      }).catch(err => {\n        console.error('Error loading schedule:', err); // 调试信息\n      });\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","user","localStorage","getItem","JSON","parse","currentTime","currentDate","Date","toISOString","slice","dailySchedule","mounted","initChart","updateTime","setInterval","loadTodaySchedules","methods","option","title","text","xAxis","type","yAxis","series","chartDom","document","getElementById","myChart","init","username","request","get","then","res","console","log","x","y","setOption","toLocaleString","today","params","date","pageSize","pageNum","Array","isArray","map","item","setDate","getDate","split","error","catch","err"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 其他内容 -->\r\n\r\n    <div class=\"time-display\">{{ currentTime }}</div>\r\n\r\n    <div id=\"main\" style=\"width: 1000px; height: 400px\"></div>\r\n\r\n    <!-- 添加今日日程部分 -->\r\n    <div class=\"daily-schedule\">\r\n      <h2>今日日程</h2>\r\n      <ul>\r\n        <li v-for=\"item in dailySchedule\" :key=\"item.id\">\r\n          {{ item.event }} - {{ item.state }} - {{ item.remark }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: \"Home\",\r\n  data() {\r\n    return {\r\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n      currentTime: '', // 添加currentTime数据属性\r\n      currentDate: new Date().toISOString().slice(0, 10),\r\n      dailySchedule: [], // 存储今日日程\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n    this.updateTime();\r\n    setInterval(this.updateTime, 1000);\r\n    this.loadTodaySchedules();\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      var option = {\r\n        title: {\r\n          text: '日程信息统计'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: []\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n        },\r\n        series: [\r\n          {\r\n            data: [],\r\n            type: 'line'\r\n          },\r\n          {\r\n            data: [],\r\n            type: 'bar'\r\n          }\r\n        ]\r\n      };\r\n      var chartDom = document.getElementById('main');\r\n      var myChart = echarts.init(chartDom);\r\n      const username = this.user.username;\r\n      this.request.get(\"/echarts/example/\" + username).then(res => {\r\n        console.log(res);\r\n        option.xAxis.data = res.data.x;\r\n        option.series[0].data = res.data.y;\r\n        option.series[1].data = res.data.y;\r\n        myChart.setOption(option);\r\n      });\r\n    },\r\n    updateTime() {\r\n      const currentDate = new Date();\r\n      this.currentTime = currentDate.toLocaleString(); // 更新currentTime\r\n    },\r\n    loadTodaySchedules() {\r\n      const today = new Date().toISOString().slice(0, 10);\r\n      const username = this.user.username;\r\n      console.log(`Loading schedule for: ${username} on ${today}`); // 调试信息\r\n      this.request.get(`/schedule/page`, {\r\n        params: {\r\n          date: today,\r\n          username: username,\r\n          pageSize: 100, // 假设今天的日程不会超过100条\r\n          pageNum: 1\r\n        }\r\n      }).then(res => {\r\n        console.log('Schedule response:', res); // 调试信息\r\n        if (res.data && Array.isArray(res.data)) {\r\n          this.dailySchedule = res.data.map(item => {\r\n            let date = new Date(item.date);\r\n            date.setDate(date.getDate() + 1);\r\n            item.date = date.toISOString().split('T')[0];\r\n            return item;\r\n          });\r\n        } else {\r\n          console.error('Unexpected response format:', res.data); // 调试信息\r\n        }\r\n      }).catch(err => {\r\n        console.error('Error loading schedule:', err); // 调试信息\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.time-display {\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-size: 36px;\r\n  color: #070403;\r\n  background-color: #edebeb;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.daily-schedule {\r\n  background-color: #f5f5f5;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.daily-schedule h2 {\r\n  font-size: 24px;\r\n  color: #333;\r\n  margin-top: 0;\r\n}\r\n\r\n</style>"],"mappings":"AAsBA,YAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,YAAA,CAAAC,OAAA,WAAAC,IAAA,CAAAC,KAAA,CAAAH,YAAA,CAAAC,OAAA;MACAG,WAAA;MAAA;MACAC,WAAA,MAAAC,IAAA,GAAAC,WAAA,GAAAC,KAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;IACA,KAAAC,UAAA;IACAC,WAAA,MAAAD,UAAA;IACA,KAAAE,kBAAA;EACA;EACAC,OAAA;IACAJ,UAAA;MACA,IAAAK,MAAA;QACAC,KAAA;UACAC,IAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACAtB,IAAA;QACA;QACAuB,KAAA;UACAD,IAAA;QACA;QACAE,MAAA,GACA;UACAxB,IAAA;UACAsB,IAAA;QACA,GACA;UACAtB,IAAA;UACAsB,IAAA;QACA;MAEA;MACA,IAAAG,QAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,IAAAC,OAAA,GAAA9B,OAAA,CAAA+B,IAAA,CAAAJ,QAAA;MACA,MAAAK,QAAA,QAAA7B,IAAA,CAAA6B,QAAA;MACA,KAAAC,OAAA,CAAAC,GAAA,uBAAAF,QAAA,EAAAG,IAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACAhB,MAAA,CAAAG,KAAA,CAAArB,IAAA,GAAAkC,GAAA,CAAAlC,IAAA,CAAAqC,CAAA;QACAnB,MAAA,CAAAM,MAAA,IAAAxB,IAAA,GAAAkC,GAAA,CAAAlC,IAAA,CAAAsC,CAAA;QACApB,MAAA,CAAAM,MAAA,IAAAxB,IAAA,GAAAkC,GAAA,CAAAlC,IAAA,CAAAsC,CAAA;QACAV,OAAA,CAAAW,SAAA,CAAArB,MAAA;MACA;IACA;IACAJ,WAAA;MACA,MAAAP,WAAA,OAAAC,IAAA;MACA,KAAAF,WAAA,GAAAC,WAAA,CAAAiC,cAAA;IACA;IACAxB,mBAAA;MACA,MAAAyB,KAAA,OAAAjC,IAAA,GAAAC,WAAA,GAAAC,KAAA;MACA,MAAAoB,QAAA,QAAA7B,IAAA,CAAA6B,QAAA;MACAK,OAAA,CAAAC,GAAA,0BAAAN,QAAA,OAAAW,KAAA;MACA,KAAAV,OAAA,CAAAC,GAAA;QACAU,MAAA;UACAC,IAAA,EAAAF,KAAA;UACAX,QAAA,EAAAA,QAAA;UACAc,QAAA;UAAA;UACAC,OAAA;QACA;MACA,GAAAZ,IAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,uBAAAF,GAAA;QACA,IAAAA,GAAA,CAAAlC,IAAA,IAAA8C,KAAA,CAAAC,OAAA,CAAAb,GAAA,CAAAlC,IAAA;UACA,KAAAW,aAAA,GAAAuB,GAAA,CAAAlC,IAAA,CAAAgD,GAAA,CAAAC,IAAA;YACA,IAAAN,IAAA,OAAAnC,IAAA,CAAAyC,IAAA,CAAAN,IAAA;YACAA,IAAA,CAAAO,OAAA,CAAAP,IAAA,CAAAQ,OAAA;YACAF,IAAA,CAAAN,IAAA,GAAAA,IAAA,CAAAlC,WAAA,GAAA2C,KAAA;YACA,OAAAH,IAAA;UACA;QACA;UACAd,OAAA,CAAAkB,KAAA,gCAAAnB,GAAA,CAAAlC,IAAA;QACA;MACA,GAAAsD,KAAA,CAAAC,GAAA;QACApB,OAAA,CAAAkB,KAAA,4BAAAE,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}