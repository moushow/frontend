{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      currentTime: '' // 添加currentTime数据属性\n    };\n  },\n  mounted() {\n    var option = {\n      title: {\n        text: '日程信息统计'\n      },\n      xAxis: {\n        type: 'category',\n        data: []\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        data: [],\n        type: 'line'\n      }, {\n        data: [],\n        type: 'bar'\n      }]\n    };\n    var chartDom = document.getElementById('main');\n    var myChart = echarts.init(chartDom);\n    const username = this.user.username;\n    this.request.get(\"/echarts/example/\" + username).then(res => {\n      console.log(res);\n      option.xAxis.data = res.data.x;\n      option.series[0].data = res.data.y;\n      option.series[1].data = res.data.y;\n      myChart.setOption(option);\n    });\n\n    // 添加更新时间的定时器\n    this.updateTime();\n    setInterval(this.updateTime, 1000);\n  },\n  methods: {\n    updateTime() {\n      const currentDate = new Date();\n      this.currentTime = currentDate.toLocaleString(); // 更新currentTime\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","user","localStorage","getItem","JSON","parse","currentTime","mounted","option","title","text","xAxis","type","yAxis","series","chartDom","document","getElementById","myChart","init","username","request","get","then","res","console","log","x","y","setOption","updateTime","setInterval","methods","currentDate","Date","toLocaleString"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 其他内容 -->\r\n\r\n    <div class=\"time-display\">{{ currentTime }}</div>\r\n\r\n     <!-- 添加今日日程部分 -->\r\n     <div class=\"daily-schedule\">\r\n      <h2>今日日程</h2>\r\n      <!-- 今日日程内容将在这里添加 -->\r\n\r\n    <div id=\"main\" style=\"width: 1000px; height: 400px\"></div>\r\n\r\n   \r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nexport default {\r\n  name: \"Home\",\r\n  data() {\r\n    return {\r\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n      currentTime: '' // 添加currentTime数据属性\r\n    }\r\n  },\r\n  mounted() {\r\n    var option = {\r\n      title: {\r\n        text: '日程信息统计'\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: []\r\n      },\r\n      yAxis: {\r\n        type: 'value'\r\n      },\r\n      series: [\r\n        {\r\n          data: [],\r\n          type: 'line'\r\n        },\r\n        {\r\n          data: [],\r\n          type: 'bar'\r\n        }\r\n      ]\r\n    };\r\n    var chartDom = document.getElementById('main');\r\n    var myChart = echarts.init(chartDom);\r\n    const username = this.user.username\r\n    this.request.get(\"/echarts/example/\" + username).then(res => {\r\n      console.log(res)\r\n      option.xAxis.data = res.data.x;\r\n      option.series[0].data = res.data.y;\r\n      option.series[1].data = res.data.y;\r\n      myChart.setOption(option);\r\n    })\r\n\r\n    // 添加更新时间的定时器\r\n    this.updateTime();\r\n    setInterval(this.updateTime, 1000);\r\n  },\r\n  methods: {\r\n    updateTime() {\r\n      const currentDate = new Date();\r\n      this.currentTime = currentDate.toLocaleString(); // 更新currentTime\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.time-display {\r\n  font-family: 'Courier New', Courier, monospace; /* 设置等宽字体 */\r\n  font-size: 36px; /* 增加字体大小 */\r\n  color: #ff3c00; /* 设置绿色字体颜色 */\r\n  background-color: #f7f2f2; /* 设置黑色背景色 */\r\n  padding: 10px 20px; /* 添加内边距 */\r\n  border-radius: 5px; /* 添加圆角 */\r\n  box-shadow: 0 2px 4px rgba(240, 238, 238, 0.1); /* 添加阴影效果 */\r\n  margin-bottom: 20px; /* 增加底部外边距 */\r\n}\r\n</style>"],"mappings":"AAmBA,YAAAA,OAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,YAAA,CAAAC,OAAA,WAAAC,IAAA,CAAAC,KAAA,CAAAH,YAAA,CAAAC,OAAA;MACAG,WAAA;IACA;EACA;EACAC,QAAA;IACA,IAAAC,MAAA;MACAC,KAAA;QACAC,IAAA;MACA;MACAC,KAAA;QACAC,IAAA;QACAZ,IAAA;MACA;MACAa,KAAA;QACAD,IAAA;MACA;MACAE,MAAA,GACA;QACAd,IAAA;QACAY,IAAA;MACA,GACA;QACAZ,IAAA;QACAY,IAAA;MACA;IAEA;IACA,IAAAG,QAAA,GAAAC,QAAA,CAAAC,cAAA;IACA,IAAAC,OAAA,GAAApB,OAAA,CAAAqB,IAAA,CAAAJ,QAAA;IACA,MAAAK,QAAA,QAAAnB,IAAA,CAAAmB,QAAA;IACA,KAAAC,OAAA,CAAAC,GAAA,uBAAAF,QAAA,EAAAG,IAAA,CAAAC,GAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACAhB,MAAA,CAAAG,KAAA,CAAAX,IAAA,GAAAwB,GAAA,CAAAxB,IAAA,CAAA2B,CAAA;MACAnB,MAAA,CAAAM,MAAA,IAAAd,IAAA,GAAAwB,GAAA,CAAAxB,IAAA,CAAA4B,CAAA;MACApB,MAAA,CAAAM,MAAA,IAAAd,IAAA,GAAAwB,GAAA,CAAAxB,IAAA,CAAA4B,CAAA;MACAV,OAAA,CAAAW,SAAA,CAAArB,MAAA;IACA;;IAEA;IACA,KAAAsB,UAAA;IACAC,WAAA,MAAAD,UAAA;EACA;EACAE,OAAA;IACAF,WAAA;MACA,MAAAG,WAAA,OAAAC,IAAA;MACA,KAAA5B,WAAA,GAAA2B,WAAA,CAAAE,cAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}