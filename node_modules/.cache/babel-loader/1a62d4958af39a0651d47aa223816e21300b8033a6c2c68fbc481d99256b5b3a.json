{"ast":null,"code":"import DigitalClock from './DigitalClock.vue';\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: \"Home\",\n  components: {\n    DigitalClock\n  },\n  data() {\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      currentTime: '',\n      // 添加currentTime数据属性\n      currentDate: new Date().toISOString().slice(0, 10),\n      dailySchedule: []\n    };\n  },\n  mounted() {\n    var option = {\n      title: {\n        text: '日程信息统计',\n        left: 'center',\n        textStyle: {\n          color: '#333',\n          fontSize: 18\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: [],\n        axisLine: {\n          lineStyle: {\n            color: '#ccc'\n          }\n        },\n        axisLabel: {\n          color: '#333'\n        }\n      },\n      yAxis: {\n        type: 'value',\n        axisLine: {\n          lineStyle: {\n            color: '#ccc'\n          }\n        },\n        axisLabel: {\n          color: '#333'\n        },\n        splitLine: {\n          lineStyle: {\n            type: 'dashed'\n          }\n        }\n      },\n      series: [{\n        data: [],\n        type: 'line',\n        smooth: true,\n        lineStyle: {\n          color: '#5470C6'\n        },\n        itemStyle: {\n          color: '#5470C6'\n        }\n      }, {\n        data: [],\n        type: 'bar',\n        barWidth: '50%',\n        itemStyle: {\n          color: '#91CC75'\n        }\n      }],\n      backgroundColor: '#fff'\n    };\n    var chartDom = document.getElementById('main');\n    var myChart = echarts.init(chartDom);\n    const username = this.user.username;\n    this.request.get(\"/echarts/example/\" + username).then(res => {\n      option.xAxis.data = res.data.x;\n      option.series[0].data = res.data.y;\n      option.series[1].data = res.data.y;\n      myChart.setOption(option);\n    });\n\n    // 添加更新时间的定时器\n    this.updateTime();\n    setInterval(this.updateTime, 1000);\n\n    // 获取今日日程数据\n    this.request.get(`/schedule/${username}`).then(res => {\n      // 打印响应内容以调试\n      console.log(res);\n      if (res.data && Array.isArray(res.data)) {\n        this.dailySchedule = res.data.map(item => item.event);\n      } else {\n        console.error(\"Invalid data format:\", res.data);\n      }\n    }).catch(err => {\n      console.error(err);\n    });\n  },\n  methods: {\n    updateTime() {\n      const currentDate = new Date();\n      this.currentTime = currentDate.toLocaleTimeString([], {\n        hour12: false\n      });\n    }\n  }\n};","map":{"version":3,"names":["DigitalClock","echarts","axios","name","components","data","user","localStorage","getItem","JSON","parse","currentTime","currentDate","Date","toISOString","slice","dailySchedule","mounted","option","title","text","left","textStyle","color","fontSize","xAxis","type","axisLine","lineStyle","axisLabel","yAxis","splitLine","series","smooth","itemStyle","barWidth","backgroundColor","chartDom","document","getElementById","myChart","init","username","request","get","then","res","x","y","setOption","updateTime","setInterval","console","log","Array","isArray","map","item","event","error","catch","err","methods","toLocaleTimeString","hour12"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- Digital Clock 组件 -->\r\n    <DigitalClock />\r\n\r\n    <!-- 间隔 -->\r\n    <div class=\"spacer\"></div>\r\n\r\n    <!-- ECharts 图表容器 -->\r\n    <div id=\"main\" class=\"chart-container\"></div>\r\n    \r\n    <!-- 今日日程部分 -->\r\n    <div class=\"daily-schedule\">\r\n      <h2>今日日程</h2>\r\n      <ul>\r\n        <li v-for=\"transaction in dailySchedule\" :key=\"transaction\">\r\n          {{ transaction }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DigitalClock from './DigitalClock.vue';\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\nexport default {\r\n  name: \"Home\",\r\n  components: {\r\n    DigitalClock\r\n  },\r\n  data() {\r\n    return {\r\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n      currentTime: '', // 添加currentTime数据属性\r\n      currentDate: new Date().toISOString().slice(0, 10),\r\n      dailySchedule: [],\r\n    }\r\n  },\r\n  mounted() {\r\n    var option = {\r\n      title: {\r\n        text: '日程信息统计',\r\n        left: 'center',\r\n        textStyle: {\r\n          color: '#333',\r\n          fontSize: 18,\r\n        },\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: [],\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: '#ccc'\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: '#333'\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: '#ccc'\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: '#333'\r\n        },\r\n        splitLine: {\r\n          lineStyle: {\r\n            type: 'dashed'\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          data: [],\r\n          type: 'line',\r\n          smooth: true,\r\n          lineStyle: {\r\n            color: '#5470C6'\r\n          },\r\n          itemStyle: {\r\n            color: '#5470C6'\r\n          }\r\n        },\r\n        {\r\n          data: [],\r\n          type: 'bar',\r\n          barWidth: '50%',\r\n          itemStyle: {\r\n            color: '#91CC75'\r\n          }\r\n        }\r\n      ],\r\n      backgroundColor: '#fff',\r\n    };\r\n    var chartDom = document.getElementById('main');\r\n    var myChart = echarts.init(chartDom);\r\n    const username = this.user.username;\r\n    this.request.get(\"/echarts/example/\" + username).then(res => {\r\n      option.xAxis.data = res.data.x;\r\n      option.series[0].data = res.data.y;\r\n      option.series[1].data = res.data.y;\r\n      myChart.setOption(option);\r\n    })\r\n\r\n    // 添加更新时间的定时器\r\n    this.updateTime();\r\n    setInterval(this.updateTime, 1000);\r\n\r\n    // 获取今日日程数据\r\n    this.request.get(`/schedule/${username}`)\r\n      .then(res => {\r\n        // 打印响应内容以调试\r\n        console.log(res);\r\n        if (res.data && Array.isArray(res.data)) {\r\n          this.dailySchedule = res.data.map(item => item.event);\r\n        } else {\r\n          console.error(\"Invalid data format:\", res.data);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  },\r\n  methods: {\r\n    updateTime() {\r\n      const currentDate = new Date();\r\n      this.currentTime = currentDate.toLocaleTimeString([], { hour12: false });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: url('background.jpg') no-repeat center center fixed;\r\n  background-size: cover;\r\n  /* 添加淡化效果 */\r\n  background-color: rgba(255, 255, 255, 0.5); /* 调整最后一个值来控制透明度 */\r\n}\r\n\r\n#app {\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  margin: 20px;\r\n  background-color: rgba(113, 160, 189, 0.8); /* 背景颜色为白色，并添加透明度 */\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.spacer {\r\n  height: 20px; /* 调整间隔的高度 */\r\n}\r\n\r\n.digital-clock {\r\n  font-family: 'Roboto', sans-serif;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #fff;\r\n  background-color: #333;\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n  text-align: center;\r\n  transition: color 0.3s, background-color 0.3s, transform 0.3s;\r\n}\r\n\r\n.digital-clock:hover {\r\n  color: #333;\r\n  background-color: #fff;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.digital-clock div {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.chart-container {\r\n  width: 100%;\r\n  height: 400px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.daily-schedule {\r\n  background-color: #f5f5f5;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.daily-schedule h2 {\r\n  font-size: 24px;\r\n  color: #333;\r\n  margin-top: 0;\r\n}\r\n\r\n.daily-schedule ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.daily-schedule li {\r\n  background-color: #fff;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.daily-schedule li:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n</style>\r\n"],"mappings":"AA0BA,OAAAA,YAAA;AACA,YAAAC,OAAA;AACA,OAAAC,KAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAJ;EACA;EACAK,KAAA;IACA;MACAC,IAAA,EAAAC,YAAA,CAAAC,OAAA,WAAAC,IAAA,CAAAC,KAAA,CAAAH,YAAA,CAAAC,OAAA;MACAG,WAAA;MAAA;MACAC,WAAA,MAAAC,IAAA,GAAAC,WAAA,GAAAC,KAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,IAAAC,MAAA;MACAC,KAAA;QACAC,IAAA;QACAC,IAAA;QACAC,SAAA;UACAC,KAAA;UACAC,QAAA;QACA;MACA;MACAC,KAAA;QACAC,IAAA;QACArB,IAAA;QACAsB,QAAA;UACAC,SAAA;YACAL,KAAA;UACA;QACA;QACAM,SAAA;UACAN,KAAA;QACA;MACA;MACAO,KAAA;QACAJ,IAAA;QACAC,QAAA;UACAC,SAAA;YACAL,KAAA;UACA;QACA;QACAM,SAAA;UACAN,KAAA;QACA;QACAQ,SAAA;UACAH,SAAA;YACAF,IAAA;UACA;QACA;MACA;MACAM,MAAA,GACA;QACA3B,IAAA;QACAqB,IAAA;QACAO,MAAA;QACAL,SAAA;UACAL,KAAA;QACA;QACAW,SAAA;UACAX,KAAA;QACA;MACA,GACA;QACAlB,IAAA;QACAqB,IAAA;QACAS,QAAA;QACAD,SAAA;UACAX,KAAA;QACA;MACA,EACA;MACAa,eAAA;IACA;IACA,IAAAC,QAAA,GAAAC,QAAA,CAAAC,cAAA;IACA,IAAAC,OAAA,GAAAvC,OAAA,CAAAwC,IAAA,CAAAJ,QAAA;IACA,MAAAK,QAAA,QAAApC,IAAA,CAAAoC,QAAA;IACA,KAAAC,OAAA,CAAAC,GAAA,uBAAAF,QAAA,EAAAG,IAAA,CAAAC,GAAA;MACA5B,MAAA,CAAAO,KAAA,CAAApB,IAAA,GAAAyC,GAAA,CAAAzC,IAAA,CAAA0C,CAAA;MACA7B,MAAA,CAAAc,MAAA,IAAA3B,IAAA,GAAAyC,GAAA,CAAAzC,IAAA,CAAA2C,CAAA;MACA9B,MAAA,CAAAc,MAAA,IAAA3B,IAAA,GAAAyC,GAAA,CAAAzC,IAAA,CAAA2C,CAAA;MACAR,OAAA,CAAAS,SAAA,CAAA/B,MAAA;IACA;;IAEA;IACA,KAAAgC,UAAA;IACAC,WAAA,MAAAD,UAAA;;IAEA;IACA,KAAAP,OAAA,CAAAC,GAAA,cAAAF,QAAA,IACAG,IAAA,CAAAC,GAAA;MACA;MACAM,OAAA,CAAAC,GAAA,CAAAP,GAAA;MACA,IAAAA,GAAA,CAAAzC,IAAA,IAAAiD,KAAA,CAAAC,OAAA,CAAAT,GAAA,CAAAzC,IAAA;QACA,KAAAW,aAAA,GAAA8B,GAAA,CAAAzC,IAAA,CAAAmD,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,KAAA;MACA;QACAN,OAAA,CAAAO,KAAA,yBAAAb,GAAA,CAAAzC,IAAA;MACA;IACA,GACAuD,KAAA,CAAAC,GAAA;MACAT,OAAA,CAAAO,KAAA,CAAAE,GAAA;IACA;EACA;EACAC,OAAA;IACAZ,WAAA;MACA,MAAAtC,WAAA,OAAAC,IAAA;MACA,KAAAF,WAAA,GAAAC,WAAA,CAAAmD,kBAAA;QAAAC,MAAA;MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}