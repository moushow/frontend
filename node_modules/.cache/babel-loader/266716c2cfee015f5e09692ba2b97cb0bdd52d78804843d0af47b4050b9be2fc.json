{"ast":null,"code":"import DigitalClock from './DigitalClock.vue';\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: \"Home\",\n  components: {\n    DigitalClock\n  },\n  data() {\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      currentTime: '',\n      currentDate: new Date().toISOString().slice(0, 10),\n      dailySchedule: [],\n      request: axios.create({\n        baseURL: 'http://localhost:8080',\n        timeout: 1000\n      })\n    };\n  },\n  mounted() {\n    this.initializeChart();\n    this.updateTime();\n    setInterval(this.updateTime, 1000);\n    this.fetchDailySchedule();\n  },\n  methods: {\n    updateTime() {\n      const currentDate = new Date();\n      this.currentTime = currentDate.toLocaleTimeString([], {\n        hour12: false\n      });\n    },\n    initializeChart() {\n      var option = {\n        title: {\n          text: '日程信息统计',\n          left: 'center',\n          textStyle: {\n            color: '#333',\n            fontSize: 18\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: [],\n          axisLine: {\n            lineStyle: {\n              color: '#ccc'\n            }\n          },\n          axisLabel: {\n            color: '#333'\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLine: {\n            lineStyle: {\n              color: '#ccc'\n            }\n          },\n          axisLabel: {\n            color: '#333'\n          },\n          splitLine: {\n            lineStyle: {\n              type: 'dashed'\n            }\n          }\n        },\n        series: [{\n          data: [],\n          type: 'line',\n          smooth: true,\n          lineStyle: {\n            color: '#5470C6'\n          },\n          itemStyle: {\n            color: '#5470C6'\n          }\n        }, {\n          data: [],\n          type: 'bar',\n          barWidth: '50%',\n          itemStyle: {\n            color: '#91CC75'\n          }\n        }],\n        backgroundColor: '#fff'\n      };\n      var chartDom = document.getElementById('main');\n      var myChart = echarts.init(chartDom);\n      const username = this.user.username;\n      this.request.get(\"/echarts/example/\" + username).then(res => {\n        option.xAxis.data = res.data.x;\n        option.series[0].data = res.data.y;\n        option.series[1].data = res.data.y;\n        myChart.setOption(option);\n      });\n    },\n    fetchDailySchedule() {\n      const username = this.user.username;\n      const url = \"/schedule/events/\" + username;\n      this.request.get(url).then(res => {\n        // 打印完整的响应数据以调试\n        console.log(\"Complete response data:\", res);\n\n        // 输出数据的格式以便更好地理解\n        console.log(\"Data format:\", typeof res.data, res.data);\n\n        // 检查数据格式\n        if (res.data && Array.isArray(res.data)) {\n          // 确认每个数据项是否有 'event' 属性\n          const isValid = res.data.every(item => 'event' in item);\n          if (isValid) {\n            this.dailySchedule = res.data.map(item => item.event);\n          } else {\n            console.error(\"Invalid data structure:\", res.data);\n          }\n        } else {\n          console.error(\"Invalid data format:\", res.data);\n        }\n      }).catch(err => {\n        console.error(\"Request failed:\", err);\n      });\n    }\n  }\n};","map":{"version":3,"names":["DigitalClock","echarts","axios","name","components","data","user","localStorage","getItem","JSON","parse","currentTime","currentDate","Date","toISOString","slice","dailySchedule","request","create","baseURL","timeout","mounted","initializeChart","updateTime","setInterval","fetchDailySchedule","methods","toLocaleTimeString","hour12","option","title","text","left","textStyle","color","fontSize","xAxis","type","axisLine","lineStyle","axisLabel","yAxis","splitLine","series","smooth","itemStyle","barWidth","backgroundColor","chartDom","document","getElementById","myChart","init","username","get","then","res","x","y","setOption","url","console","log","Array","isArray","isValid","every","item","map","event","error","catch","err"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- Digital Clock 组件 -->\r\n    <DigitalClock />\r\n\r\n    <!-- 间隔 -->\r\n    <div class=\"spacer\"></div>\r\n\r\n    <!-- ECharts 图表容器 -->\r\n    <div id=\"main\" class=\"chart-container\"></div>\r\n    \r\n    <!-- 今日日程部分 -->\r\n    <div class=\"daily-schedule\">\r\n      <h2>今日日程</h2>\r\n      <ul>\r\n        <li v-for=\"transaction in dailySchedule\" :key=\"transaction\">\r\n          {{ transaction }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DigitalClock from './DigitalClock.vue';\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"Home\",\r\n  components: {\r\n    DigitalClock\r\n  },\r\n  data() {\r\n    return {\r\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n      currentTime: '',\r\n      currentDate: new Date().toISOString().slice(0, 10),\r\n      dailySchedule: [],\r\n      request: axios.create({\r\n        baseURL: 'http://localhost:8080',\r\n        timeout: 1000,\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initializeChart();\r\n    this.updateTime();\r\n    setInterval(this.updateTime, 1000);\r\n    this.fetchDailySchedule();\r\n  },\r\n  methods: {\r\n    updateTime() {\r\n      const currentDate = new Date();\r\n      this.currentTime = currentDate.toLocaleTimeString([], { hour12: false });\r\n    },\r\n    initializeChart() {\r\n      var option = {\r\n        title: {\r\n          text: '日程信息统计',\r\n          left: 'center',\r\n          textStyle: {\r\n            color: '#333',\r\n            fontSize: 18,\r\n          },\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: '#ccc'\r\n            }\r\n          },\r\n          axisLabel: {\r\n            color: '#333'\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: '#ccc'\r\n            }\r\n          },\r\n          axisLabel: {\r\n            color: '#333'\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: 'dashed'\r\n            }\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            data: [],\r\n            type: 'line',\r\n            smooth: true,\r\n            lineStyle: {\r\n              color: '#5470C6'\r\n            },\r\n            itemStyle: {\r\n              color: '#5470C6'\r\n            }\r\n          },\r\n          {\r\n            data: [],\r\n            type: 'bar',\r\n            barWidth: '50%',\r\n            itemStyle: {\r\n              color: '#91CC75'\r\n            }\r\n          }\r\n        ],\r\n        backgroundColor: '#fff',\r\n      };\r\n      var chartDom = document.getElementById('main');\r\n      var myChart = echarts.init(chartDom);\r\n      const username = this.user.username;\r\n      this.request.get(\"/echarts/example/\" + username).then(res => {\r\n        option.xAxis.data = res.data.x;\r\n        option.series[0].data = res.data.y;\r\n        option.series[1].data = res.data.y;\r\n        myChart.setOption(option);\r\n      })\r\n    },\r\n    fetchDailySchedule() {\r\n      const username = this.user.username;\r\n      const url = \"/schedule/events/\" + username;\r\n      this.request.get(url)\r\n        .then(res => {\r\n          // 打印完整的响应数据以调试\r\n          console.log(\"Complete response data:\", res);\r\n\r\n          // 输出数据的格式以便更好地理解\r\n          console.log(\"Data format:\", typeof res.data, res.data);\r\n\r\n          // 检查数据格式\r\n          if (res.data && Array.isArray(res.data)) {\r\n            // 确认每个数据项是否有 'event' 属性\r\n            const isValid = res.data.every(item => 'event' in item);\r\n\r\n            if (isValid) {\r\n              this.dailySchedule = res.data.map(item => item.event);\r\n            } else {\r\n              console.error(\"Invalid data structure:\", res.data);\r\n            }\r\n          } else {\r\n            console.error(\"Invalid data format:\", res.data);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error(\"Request failed:\", err);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: url('background.jpg') no-repeat center center fixed;\r\n  background-size: cover;\r\n  background-color: rgba(255, 255, 255, 0.5); /* 调整透明度 */\r\n}\r\n\r\n#app {\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  margin: 20px;\r\n  background-color: rgba(113, 160, 189, 0.8); /* 背景颜色 */\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.spacer {\r\n  height: 20px; /* 调整间隔的高度 */\r\n}\r\n\r\n.digital-clock {\r\n  font-family: 'Roboto', sans-serif;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #fff;\r\n  background-color: #333;\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n  text-align: center;\r\n  transition: color 0.3s, background-color 0.3s, transform 0.3s;\r\n}\r\n\r\n.digital-clock:hover {\r\n  color: #333;\r\n  background-color: #fff;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.digital-clock div {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.chart-container {\r\n  width: 100%;\r\n  height: 400px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.daily-schedule {\r\n  background-color: #f5f5f5;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.daily-schedule h2 {\r\n  font-size: 24px;\r\n  color: #333;\r\n  margin-top: 0;\r\n}\r\n\r\n.daily-schedule ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.daily-schedule li {\r\n  background-color: #fff;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s, box-shadow 0.3s;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\r\n}\r\n\r\n.daily-schedule li:hover {\r\n  background-color: #f0f0f0; /* 鼠标悬停时改变背景颜色 */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 悬停时添加更大的阴影 */\r\n  color: #5470C6; /* 改变文字颜色 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}